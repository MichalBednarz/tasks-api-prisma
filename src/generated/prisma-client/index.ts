// Code generated by Prisma (prisma@1.32.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  subproject: (where?: SubprojectWhereInput) => Promise<boolean>;
  task: (where?: TaskWhereInput) => Promise<boolean>;
  timelog: (where?: TimelogWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  subproject: (where: SubprojectWhereUniqueInput) => SubprojectNullablePromise;
  subprojects: (args?: {
    where?: SubprojectWhereInput;
    orderBy?: SubprojectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Subproject>;
  subprojectsConnection: (args?: {
    where?: SubprojectWhereInput;
    orderBy?: SubprojectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SubprojectConnectionPromise;
  task: (where: TaskWhereUniqueInput) => TaskNullablePromise;
  tasks: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Task>;
  tasksConnection: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaskConnectionPromise;
  timelog: (where: TimelogWhereUniqueInput) => TimelogNullablePromise;
  timelogs: (args?: {
    where?: TimelogWhereInput;
    orderBy?: TimelogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Timelog>;
  timelogsConnection: (args?: {
    where?: TimelogWhereInput;
    orderBy?: TimelogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TimelogConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createSubproject: (data: SubprojectCreateInput) => SubprojectPromise;
  updateSubproject: (args: {
    data: SubprojectUpdateInput;
    where: SubprojectWhereUniqueInput;
  }) => SubprojectPromise;
  updateManySubprojects: (args: {
    data: SubprojectUpdateManyMutationInput;
    where?: SubprojectWhereInput;
  }) => BatchPayloadPromise;
  upsertSubproject: (args: {
    where: SubprojectWhereUniqueInput;
    create: SubprojectCreateInput;
    update: SubprojectUpdateInput;
  }) => SubprojectPromise;
  deleteSubproject: (where: SubprojectWhereUniqueInput) => SubprojectPromise;
  deleteManySubprojects: (where?: SubprojectWhereInput) => BatchPayloadPromise;
  createTask: (data: TaskCreateInput) => TaskPromise;
  updateTask: (args: {
    data: TaskUpdateInput;
    where: TaskWhereUniqueInput;
  }) => TaskPromise;
  updateManyTasks: (args: {
    data: TaskUpdateManyMutationInput;
    where?: TaskWhereInput;
  }) => BatchPayloadPromise;
  upsertTask: (args: {
    where: TaskWhereUniqueInput;
    create: TaskCreateInput;
    update: TaskUpdateInput;
  }) => TaskPromise;
  deleteTask: (where: TaskWhereUniqueInput) => TaskPromise;
  deleteManyTasks: (where?: TaskWhereInput) => BatchPayloadPromise;
  createTimelog: (data: TimelogCreateInput) => TimelogPromise;
  updateTimelog: (args: {
    data: TimelogUpdateInput;
    where: TimelogWhereUniqueInput;
  }) => TimelogPromise;
  updateManyTimelogs: (args: {
    data: TimelogUpdateManyMutationInput;
    where?: TimelogWhereInput;
  }) => BatchPayloadPromise;
  upsertTimelog: (args: {
    where: TimelogWhereUniqueInput;
    create: TimelogCreateInput;
    update: TimelogUpdateInput;
  }) => TimelogPromise;
  deleteTimelog: (where: TimelogWhereUniqueInput) => TimelogPromise;
  deleteManyTimelogs: (where?: TimelogWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  subproject: (
    where?: SubprojectSubscriptionWhereInput
  ) => SubprojectSubscriptionPayloadSubscription;
  task: (
    where?: TaskSubscriptionWhereInput
  ) => TaskSubscriptionPayloadSubscription;
  timelog: (
    where?: TimelogSubscriptionWhereInput
  ) => TimelogSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SubprojectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type TaskOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "priority_ASC"
  | "priority_DESC"
  | "comments_ASC"
  | "comments_DESC"
  | "repeat_ASC"
  | "repeat_DESC"
  | "estimateTime_ASC"
  | "estimateTime_DESC"
  | "plannedTime_ASC"
  | "plannedTime_DESC"
  | "plannedDate_ASC"
  | "plannedDate_DESC"
  | "finishDate_ASC"
  | "finishDate_DESC"
  | "deadlineDate_ASC"
  | "deadlineDate_DESC"
  | "completed_ASC"
  | "completed_DESC";

export type TimelogOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "finishDate_ASC"
  | "finishDate_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TimelogUpsertWithWhereUniqueWithoutTaskInput {
  where: TimelogWhereUniqueInput;
  update: TimelogUpdateWithoutTaskDataInput;
  create: TimelogCreateWithoutTaskInput;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface TimelogCreateManyWithoutTaskInput {
  create?: Maybe<
    TimelogCreateWithoutTaskInput[] | TimelogCreateWithoutTaskInput
  >;
  connect?: Maybe<TimelogWhereUniqueInput[] | TimelogWhereUniqueInput>;
}

export interface ProjectUpdateWithoutSubprojectsDataInput {
  name?: Maybe<String>;
}

export interface TimelogCreateWithoutTaskInput {
  id?: Maybe<Int>;
  startDate?: Maybe<DateTimeInput>;
  finishDate?: Maybe<DateTimeInput>;
}

export interface TimelogUpdateManyDataInput {
  startDate?: Maybe<DateTimeInput>;
  finishDate?: Maybe<DateTimeInput>;
}

export interface ProjectUpdateInput {
  name?: Maybe<String>;
  subprojects?: Maybe<SubprojectUpdateManyWithoutProjectInput>;
}

export interface TaskWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  priority?: Maybe<String>;
  priority_not?: Maybe<String>;
  priority_in?: Maybe<String[] | String>;
  priority_not_in?: Maybe<String[] | String>;
  priority_lt?: Maybe<String>;
  priority_lte?: Maybe<String>;
  priority_gt?: Maybe<String>;
  priority_gte?: Maybe<String>;
  priority_contains?: Maybe<String>;
  priority_not_contains?: Maybe<String>;
  priority_starts_with?: Maybe<String>;
  priority_not_starts_with?: Maybe<String>;
  priority_ends_with?: Maybe<String>;
  priority_not_ends_with?: Maybe<String>;
  comments?: Maybe<String>;
  comments_not?: Maybe<String>;
  comments_in?: Maybe<String[] | String>;
  comments_not_in?: Maybe<String[] | String>;
  comments_lt?: Maybe<String>;
  comments_lte?: Maybe<String>;
  comments_gt?: Maybe<String>;
  comments_gte?: Maybe<String>;
  comments_contains?: Maybe<String>;
  comments_not_contains?: Maybe<String>;
  comments_starts_with?: Maybe<String>;
  comments_not_starts_with?: Maybe<String>;
  comments_ends_with?: Maybe<String>;
  comments_not_ends_with?: Maybe<String>;
  repeat?: Maybe<Int>;
  repeat_not?: Maybe<Int>;
  repeat_in?: Maybe<Int[] | Int>;
  repeat_not_in?: Maybe<Int[] | Int>;
  repeat_lt?: Maybe<Int>;
  repeat_lte?: Maybe<Int>;
  repeat_gt?: Maybe<Int>;
  repeat_gte?: Maybe<Int>;
  estimateTime?: Maybe<String>;
  estimateTime_not?: Maybe<String>;
  estimateTime_in?: Maybe<String[] | String>;
  estimateTime_not_in?: Maybe<String[] | String>;
  estimateTime_lt?: Maybe<String>;
  estimateTime_lte?: Maybe<String>;
  estimateTime_gt?: Maybe<String>;
  estimateTime_gte?: Maybe<String>;
  estimateTime_contains?: Maybe<String>;
  estimateTime_not_contains?: Maybe<String>;
  estimateTime_starts_with?: Maybe<String>;
  estimateTime_not_starts_with?: Maybe<String>;
  estimateTime_ends_with?: Maybe<String>;
  estimateTime_not_ends_with?: Maybe<String>;
  plannedTime?: Maybe<String>;
  plannedTime_not?: Maybe<String>;
  plannedTime_in?: Maybe<String[] | String>;
  plannedTime_not_in?: Maybe<String[] | String>;
  plannedTime_lt?: Maybe<String>;
  plannedTime_lte?: Maybe<String>;
  plannedTime_gt?: Maybe<String>;
  plannedTime_gte?: Maybe<String>;
  plannedTime_contains?: Maybe<String>;
  plannedTime_not_contains?: Maybe<String>;
  plannedTime_starts_with?: Maybe<String>;
  plannedTime_not_starts_with?: Maybe<String>;
  plannedTime_ends_with?: Maybe<String>;
  plannedTime_not_ends_with?: Maybe<String>;
  plannedDate?: Maybe<String>;
  plannedDate_not?: Maybe<String>;
  plannedDate_in?: Maybe<String[] | String>;
  plannedDate_not_in?: Maybe<String[] | String>;
  plannedDate_lt?: Maybe<String>;
  plannedDate_lte?: Maybe<String>;
  plannedDate_gt?: Maybe<String>;
  plannedDate_gte?: Maybe<String>;
  plannedDate_contains?: Maybe<String>;
  plannedDate_not_contains?: Maybe<String>;
  plannedDate_starts_with?: Maybe<String>;
  plannedDate_not_starts_with?: Maybe<String>;
  plannedDate_ends_with?: Maybe<String>;
  plannedDate_not_ends_with?: Maybe<String>;
  finishDate?: Maybe<String>;
  finishDate_not?: Maybe<String>;
  finishDate_in?: Maybe<String[] | String>;
  finishDate_not_in?: Maybe<String[] | String>;
  finishDate_lt?: Maybe<String>;
  finishDate_lte?: Maybe<String>;
  finishDate_gt?: Maybe<String>;
  finishDate_gte?: Maybe<String>;
  finishDate_contains?: Maybe<String>;
  finishDate_not_contains?: Maybe<String>;
  finishDate_starts_with?: Maybe<String>;
  finishDate_not_starts_with?: Maybe<String>;
  finishDate_ends_with?: Maybe<String>;
  finishDate_not_ends_with?: Maybe<String>;
  deadlineDate?: Maybe<String>;
  deadlineDate_not?: Maybe<String>;
  deadlineDate_in?: Maybe<String[] | String>;
  deadlineDate_not_in?: Maybe<String[] | String>;
  deadlineDate_lt?: Maybe<String>;
  deadlineDate_lte?: Maybe<String>;
  deadlineDate_gt?: Maybe<String>;
  deadlineDate_gte?: Maybe<String>;
  deadlineDate_contains?: Maybe<String>;
  deadlineDate_not_contains?: Maybe<String>;
  deadlineDate_starts_with?: Maybe<String>;
  deadlineDate_not_starts_with?: Maybe<String>;
  deadlineDate_ends_with?: Maybe<String>;
  deadlineDate_not_ends_with?: Maybe<String>;
  completed?: Maybe<Boolean>;
  completed_not?: Maybe<Boolean>;
  subproject?: Maybe<SubprojectWhereInput>;
  timelogs_every?: Maybe<TimelogWhereInput>;
  timelogs_some?: Maybe<TimelogWhereInput>;
  timelogs_none?: Maybe<TimelogWhereInput>;
  AND?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  OR?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  NOT?: Maybe<TaskWhereInput[] | TaskWhereInput>;
}

export interface SubprojectUpdateManyWithoutProjectInput {
  create?: Maybe<
    SubprojectCreateWithoutProjectInput[] | SubprojectCreateWithoutProjectInput
  >;
  delete?: Maybe<SubprojectWhereUniqueInput[] | SubprojectWhereUniqueInput>;
  connect?: Maybe<SubprojectWhereUniqueInput[] | SubprojectWhereUniqueInput>;
  set?: Maybe<SubprojectWhereUniqueInput[] | SubprojectWhereUniqueInput>;
  disconnect?: Maybe<SubprojectWhereUniqueInput[] | SubprojectWhereUniqueInput>;
  update?: Maybe<
    | SubprojectUpdateWithWhereUniqueWithoutProjectInput[]
    | SubprojectUpdateWithWhereUniqueWithoutProjectInput
  >;
  upsert?: Maybe<
    | SubprojectUpsertWithWhereUniqueWithoutProjectInput[]
    | SubprojectUpsertWithWhereUniqueWithoutProjectInput
  >;
  deleteMany?: Maybe<SubprojectScalarWhereInput[] | SubprojectScalarWhereInput>;
  updateMany?: Maybe<
    | SubprojectUpdateManyWithWhereNestedInput[]
    | SubprojectUpdateManyWithWhereNestedInput
  >;
}

export interface ProjectWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  subprojects_every?: Maybe<SubprojectWhereInput>;
  subprojects_some?: Maybe<SubprojectWhereInput>;
  subprojects_none?: Maybe<SubprojectWhereInput>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface SubprojectUpdateWithWhereUniqueWithoutProjectInput {
  where: SubprojectWhereUniqueInput;
  data: SubprojectUpdateWithoutProjectDataInput;
}

export interface SubprojectWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  project?: Maybe<ProjectWhereInput>;
  tasks_every?: Maybe<TaskWhereInput>;
  tasks_some?: Maybe<TaskWhereInput>;
  tasks_none?: Maybe<TaskWhereInput>;
  AND?: Maybe<SubprojectWhereInput[] | SubprojectWhereInput>;
  OR?: Maybe<SubprojectWhereInput[] | SubprojectWhereInput>;
  NOT?: Maybe<SubprojectWhereInput[] | SubprojectWhereInput>;
}

export interface SubprojectUpdateWithoutProjectDataInput {
  name?: Maybe<String>;
  tasks?: Maybe<TaskUpdateManyWithoutSubprojectInput>;
}

export interface TimelogUpdateManyMutationInput {
  startDate?: Maybe<DateTimeInput>;
  finishDate?: Maybe<DateTimeInput>;
}

export interface TaskUpdateManyWithoutSubprojectInput {
  create?: Maybe<
    TaskCreateWithoutSubprojectInput[] | TaskCreateWithoutSubprojectInput
  >;
  delete?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  set?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  disconnect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  update?: Maybe<
    | TaskUpdateWithWhereUniqueWithoutSubprojectInput[]
    | TaskUpdateWithWhereUniqueWithoutSubprojectInput
  >;
  upsert?: Maybe<
    | TaskUpsertWithWhereUniqueWithoutSubprojectInput[]
    | TaskUpsertWithWhereUniqueWithoutSubprojectInput
  >;
  deleteMany?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  updateMany?: Maybe<
    TaskUpdateManyWithWhereNestedInput[] | TaskUpdateManyWithWhereNestedInput
  >;
}

export interface TaskUpdateWithoutTimelogsDataInput {
  name?: Maybe<String>;
  priority?: Maybe<String>;
  comments?: Maybe<String>;
  repeat?: Maybe<Int>;
  estimateTime?: Maybe<String>;
  plannedTime?: Maybe<String>;
  plannedDate?: Maybe<String>;
  finishDate?: Maybe<String>;
  deadlineDate?: Maybe<String>;
  completed?: Maybe<Boolean>;
  subproject?: Maybe<SubprojectUpdateOneWithoutTasksInput>;
}

export interface TaskUpdateWithWhereUniqueWithoutSubprojectInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutSubprojectDataInput;
}

export interface TimelogUpdateInput {
  startDate?: Maybe<DateTimeInput>;
  finishDate?: Maybe<DateTimeInput>;
  task?: Maybe<TaskUpdateOneRequiredWithoutTimelogsInput>;
}

export interface TaskUpdateWithoutSubprojectDataInput {
  name?: Maybe<String>;
  priority?: Maybe<String>;
  comments?: Maybe<String>;
  repeat?: Maybe<Int>;
  estimateTime?: Maybe<String>;
  plannedTime?: Maybe<String>;
  plannedDate?: Maybe<String>;
  finishDate?: Maybe<String>;
  deadlineDate?: Maybe<String>;
  completed?: Maybe<Boolean>;
  timelogs?: Maybe<TimelogUpdateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutTimelogsInput {
  id?: Maybe<Int>;
  name: String;
  priority?: Maybe<String>;
  comments?: Maybe<String>;
  repeat?: Maybe<Int>;
  estimateTime?: Maybe<String>;
  plannedTime?: Maybe<String>;
  plannedDate?: Maybe<String>;
  finishDate?: Maybe<String>;
  deadlineDate?: Maybe<String>;
  completed?: Maybe<Boolean>;
  subproject?: Maybe<SubprojectCreateOneWithoutTasksInput>;
}

export interface TimelogUpdateManyWithoutTaskInput {
  create?: Maybe<
    TimelogCreateWithoutTaskInput[] | TimelogCreateWithoutTaskInput
  >;
  delete?: Maybe<TimelogWhereUniqueInput[] | TimelogWhereUniqueInput>;
  connect?: Maybe<TimelogWhereUniqueInput[] | TimelogWhereUniqueInput>;
  set?: Maybe<TimelogWhereUniqueInput[] | TimelogWhereUniqueInput>;
  disconnect?: Maybe<TimelogWhereUniqueInput[] | TimelogWhereUniqueInput>;
  update?: Maybe<
    | TimelogUpdateWithWhereUniqueWithoutTaskInput[]
    | TimelogUpdateWithWhereUniqueWithoutTaskInput
  >;
  upsert?: Maybe<
    | TimelogUpsertWithWhereUniqueWithoutTaskInput[]
    | TimelogUpsertWithWhereUniqueWithoutTaskInput
  >;
  deleteMany?: Maybe<TimelogScalarWhereInput[] | TimelogScalarWhereInput>;
  updateMany?: Maybe<
    | TimelogUpdateManyWithWhereNestedInput[]
    | TimelogUpdateManyWithWhereNestedInput
  >;
}

export interface TimelogCreateInput {
  id?: Maybe<Int>;
  startDate?: Maybe<DateTimeInput>;
  finishDate?: Maybe<DateTimeInput>;
  task: TaskCreateOneWithoutTimelogsInput;
}

export interface TimelogUpdateWithWhereUniqueWithoutTaskInput {
  where: TimelogWhereUniqueInput;
  data: TimelogUpdateWithoutTaskDataInput;
}

export interface TaskUpdateManyMutationInput {
  name?: Maybe<String>;
  priority?: Maybe<String>;
  comments?: Maybe<String>;
  repeat?: Maybe<Int>;
  estimateTime?: Maybe<String>;
  plannedTime?: Maybe<String>;
  plannedDate?: Maybe<String>;
  finishDate?: Maybe<String>;
  deadlineDate?: Maybe<String>;
  completed?: Maybe<Boolean>;
}

export interface TimelogUpdateWithoutTaskDataInput {
  startDate?: Maybe<DateTimeInput>;
  finishDate?: Maybe<DateTimeInput>;
}

export interface SubprojectUpdateWithoutTasksDataInput {
  name?: Maybe<String>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutSubprojectsInput>;
}

export interface TaskCreateInput {
  id?: Maybe<Int>;
  name: String;
  priority?: Maybe<String>;
  comments?: Maybe<String>;
  repeat?: Maybe<Int>;
  estimateTime?: Maybe<String>;
  plannedTime?: Maybe<String>;
  plannedDate?: Maybe<String>;
  finishDate?: Maybe<String>;
  deadlineDate?: Maybe<String>;
  completed?: Maybe<Boolean>;
  subproject?: Maybe<SubprojectCreateOneWithoutTasksInput>;
  timelogs?: Maybe<TimelogCreateManyWithoutTaskInput>;
}

export interface SubprojectUpdateOneWithoutTasksInput {
  create?: Maybe<SubprojectCreateWithoutTasksInput>;
  update?: Maybe<SubprojectUpdateWithoutTasksDataInput>;
  upsert?: Maybe<SubprojectUpsertWithoutTasksInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<SubprojectWhereUniqueInput>;
}

export interface TimelogScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  finishDate?: Maybe<DateTimeInput>;
  finishDate_not?: Maybe<DateTimeInput>;
  finishDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  finishDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  finishDate_lt?: Maybe<DateTimeInput>;
  finishDate_lte?: Maybe<DateTimeInput>;
  finishDate_gt?: Maybe<DateTimeInput>;
  finishDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TimelogScalarWhereInput[] | TimelogScalarWhereInput>;
  OR?: Maybe<TimelogScalarWhereInput[] | TimelogScalarWhereInput>;
  NOT?: Maybe<TimelogScalarWhereInput[] | TimelogScalarWhereInput>;
}

export interface SubprojectCreateWithoutTasksInput {
  id?: Maybe<Int>;
  name: String;
  project: ProjectCreateOneWithoutSubprojectsInput;
}

export interface TimelogUpdateManyWithWhereNestedInput {
  where: TimelogScalarWhereInput;
  data: TimelogUpdateManyDataInput;
}

export interface SubprojectCreateManyWithoutProjectInput {
  create?: Maybe<
    SubprojectCreateWithoutProjectInput[] | SubprojectCreateWithoutProjectInput
  >;
  connect?: Maybe<SubprojectWhereUniqueInput[] | SubprojectWhereUniqueInput>;
}

export interface TimelogWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  finishDate?: Maybe<DateTimeInput>;
  finishDate_not?: Maybe<DateTimeInput>;
  finishDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  finishDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  finishDate_lt?: Maybe<DateTimeInput>;
  finishDate_lte?: Maybe<DateTimeInput>;
  finishDate_gt?: Maybe<DateTimeInput>;
  finishDate_gte?: Maybe<DateTimeInput>;
  task?: Maybe<TaskWhereInput>;
  AND?: Maybe<TimelogWhereInput[] | TimelogWhereInput>;
  OR?: Maybe<TimelogWhereInput[] | TimelogWhereInput>;
  NOT?: Maybe<TimelogWhereInput[] | TimelogWhereInput>;
}

export interface TaskCreateManyWithoutSubprojectInput {
  create?: Maybe<
    TaskCreateWithoutSubprojectInput[] | TaskCreateWithoutSubprojectInput
  >;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
}

export interface TaskUpsertWithWhereUniqueWithoutSubprojectInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutSubprojectDataInput;
  create: TaskCreateWithoutSubprojectInput;
}

export interface TimelogSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TimelogWhereInput>;
  AND?: Maybe<TimelogSubscriptionWhereInput[] | TimelogSubscriptionWhereInput>;
  OR?: Maybe<TimelogSubscriptionWhereInput[] | TimelogSubscriptionWhereInput>;
  NOT?: Maybe<TimelogSubscriptionWhereInput[] | TimelogSubscriptionWhereInput>;
}

export interface TaskScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  priority?: Maybe<String>;
  priority_not?: Maybe<String>;
  priority_in?: Maybe<String[] | String>;
  priority_not_in?: Maybe<String[] | String>;
  priority_lt?: Maybe<String>;
  priority_lte?: Maybe<String>;
  priority_gt?: Maybe<String>;
  priority_gte?: Maybe<String>;
  priority_contains?: Maybe<String>;
  priority_not_contains?: Maybe<String>;
  priority_starts_with?: Maybe<String>;
  priority_not_starts_with?: Maybe<String>;
  priority_ends_with?: Maybe<String>;
  priority_not_ends_with?: Maybe<String>;
  comments?: Maybe<String>;
  comments_not?: Maybe<String>;
  comments_in?: Maybe<String[] | String>;
  comments_not_in?: Maybe<String[] | String>;
  comments_lt?: Maybe<String>;
  comments_lte?: Maybe<String>;
  comments_gt?: Maybe<String>;
  comments_gte?: Maybe<String>;
  comments_contains?: Maybe<String>;
  comments_not_contains?: Maybe<String>;
  comments_starts_with?: Maybe<String>;
  comments_not_starts_with?: Maybe<String>;
  comments_ends_with?: Maybe<String>;
  comments_not_ends_with?: Maybe<String>;
  repeat?: Maybe<Int>;
  repeat_not?: Maybe<Int>;
  repeat_in?: Maybe<Int[] | Int>;
  repeat_not_in?: Maybe<Int[] | Int>;
  repeat_lt?: Maybe<Int>;
  repeat_lte?: Maybe<Int>;
  repeat_gt?: Maybe<Int>;
  repeat_gte?: Maybe<Int>;
  estimateTime?: Maybe<String>;
  estimateTime_not?: Maybe<String>;
  estimateTime_in?: Maybe<String[] | String>;
  estimateTime_not_in?: Maybe<String[] | String>;
  estimateTime_lt?: Maybe<String>;
  estimateTime_lte?: Maybe<String>;
  estimateTime_gt?: Maybe<String>;
  estimateTime_gte?: Maybe<String>;
  estimateTime_contains?: Maybe<String>;
  estimateTime_not_contains?: Maybe<String>;
  estimateTime_starts_with?: Maybe<String>;
  estimateTime_not_starts_with?: Maybe<String>;
  estimateTime_ends_with?: Maybe<String>;
  estimateTime_not_ends_with?: Maybe<String>;
  plannedTime?: Maybe<String>;
  plannedTime_not?: Maybe<String>;
  plannedTime_in?: Maybe<String[] | String>;
  plannedTime_not_in?: Maybe<String[] | String>;
  plannedTime_lt?: Maybe<String>;
  plannedTime_lte?: Maybe<String>;
  plannedTime_gt?: Maybe<String>;
  plannedTime_gte?: Maybe<String>;
  plannedTime_contains?: Maybe<String>;
  plannedTime_not_contains?: Maybe<String>;
  plannedTime_starts_with?: Maybe<String>;
  plannedTime_not_starts_with?: Maybe<String>;
  plannedTime_ends_with?: Maybe<String>;
  plannedTime_not_ends_with?: Maybe<String>;
  plannedDate?: Maybe<String>;
  plannedDate_not?: Maybe<String>;
  plannedDate_in?: Maybe<String[] | String>;
  plannedDate_not_in?: Maybe<String[] | String>;
  plannedDate_lt?: Maybe<String>;
  plannedDate_lte?: Maybe<String>;
  plannedDate_gt?: Maybe<String>;
  plannedDate_gte?: Maybe<String>;
  plannedDate_contains?: Maybe<String>;
  plannedDate_not_contains?: Maybe<String>;
  plannedDate_starts_with?: Maybe<String>;
  plannedDate_not_starts_with?: Maybe<String>;
  plannedDate_ends_with?: Maybe<String>;
  plannedDate_not_ends_with?: Maybe<String>;
  finishDate?: Maybe<String>;
  finishDate_not?: Maybe<String>;
  finishDate_in?: Maybe<String[] | String>;
  finishDate_not_in?: Maybe<String[] | String>;
  finishDate_lt?: Maybe<String>;
  finishDate_lte?: Maybe<String>;
  finishDate_gt?: Maybe<String>;
  finishDate_gte?: Maybe<String>;
  finishDate_contains?: Maybe<String>;
  finishDate_not_contains?: Maybe<String>;
  finishDate_starts_with?: Maybe<String>;
  finishDate_not_starts_with?: Maybe<String>;
  finishDate_ends_with?: Maybe<String>;
  finishDate_not_ends_with?: Maybe<String>;
  deadlineDate?: Maybe<String>;
  deadlineDate_not?: Maybe<String>;
  deadlineDate_in?: Maybe<String[] | String>;
  deadlineDate_not_in?: Maybe<String[] | String>;
  deadlineDate_lt?: Maybe<String>;
  deadlineDate_lte?: Maybe<String>;
  deadlineDate_gt?: Maybe<String>;
  deadlineDate_gte?: Maybe<String>;
  deadlineDate_contains?: Maybe<String>;
  deadlineDate_not_contains?: Maybe<String>;
  deadlineDate_starts_with?: Maybe<String>;
  deadlineDate_not_starts_with?: Maybe<String>;
  deadlineDate_ends_with?: Maybe<String>;
  deadlineDate_not_ends_with?: Maybe<String>;
  completed?: Maybe<Boolean>;
  completed_not?: Maybe<Boolean>;
  AND?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  OR?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  NOT?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
}

export interface SubprojectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SubprojectWhereInput>;
  AND?: Maybe<
    SubprojectSubscriptionWhereInput[] | SubprojectSubscriptionWhereInput
  >;
  OR?: Maybe<
    SubprojectSubscriptionWhereInput[] | SubprojectSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SubprojectSubscriptionWhereInput[] | SubprojectSubscriptionWhereInput
  >;
}

export interface TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput;
  data: TaskUpdateManyDataInput;
}

export interface TaskUpsertWithoutTimelogsInput {
  update: TaskUpdateWithoutTimelogsDataInput;
  create: TaskCreateWithoutTimelogsInput;
}

export interface TaskUpdateManyDataInput {
  name?: Maybe<String>;
  priority?: Maybe<String>;
  comments?: Maybe<String>;
  repeat?: Maybe<Int>;
  estimateTime?: Maybe<String>;
  plannedTime?: Maybe<String>;
  plannedDate?: Maybe<String>;
  finishDate?: Maybe<String>;
  deadlineDate?: Maybe<String>;
  completed?: Maybe<Boolean>;
}

export type SubprojectWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface SubprojectUpsertWithWhereUniqueWithoutProjectInput {
  where: SubprojectWhereUniqueInput;
  update: SubprojectUpdateWithoutProjectDataInput;
  create: SubprojectCreateWithoutProjectInput;
}

export type TaskWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface SubprojectScalarWhereInput {
  id?: Maybe<Int>;
  id_not?: Maybe<Int>;
  id_in?: Maybe<Int[] | Int>;
  id_not_in?: Maybe<Int[] | Int>;
  id_lt?: Maybe<Int>;
  id_lte?: Maybe<Int>;
  id_gt?: Maybe<Int>;
  id_gte?: Maybe<Int>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<SubprojectScalarWhereInput[] | SubprojectScalarWhereInput>;
  OR?: Maybe<SubprojectScalarWhereInput[] | SubprojectScalarWhereInput>;
  NOT?: Maybe<SubprojectScalarWhereInput[] | SubprojectScalarWhereInput>;
}

export type TimelogWhereUniqueInput = AtLeastOne<{
  id: Maybe<Int>;
}>;

export interface SubprojectUpdateManyWithWhereNestedInput {
  where: SubprojectScalarWhereInput;
  data: SubprojectUpdateManyDataInput;
}

export interface SubprojectCreateOneWithoutTasksInput {
  create?: Maybe<SubprojectCreateWithoutTasksInput>;
  connect?: Maybe<SubprojectWhereUniqueInput>;
}

export interface SubprojectUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface SubprojectCreateWithoutProjectInput {
  id?: Maybe<Int>;
  name: String;
  tasks?: Maybe<TaskCreateManyWithoutSubprojectInput>;
}

export interface ProjectUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface TaskSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaskWhereInput>;
  AND?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  OR?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  NOT?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
}

export interface SubprojectUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface TaskUpdateOneRequiredWithoutTimelogsInput {
  create?: Maybe<TaskCreateWithoutTimelogsInput>;
  update?: Maybe<TaskUpdateWithoutTimelogsDataInput>;
  upsert?: Maybe<TaskUpsertWithoutTimelogsInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface ProjectUpsertWithoutSubprojectsInput {
  update: ProjectUpdateWithoutSubprojectsDataInput;
  create: ProjectCreateWithoutSubprojectsInput;
}

export interface SubprojectUpsertWithoutTasksInput {
  update: SubprojectUpdateWithoutTasksDataInput;
  create: SubprojectCreateWithoutTasksInput;
}

export interface SubprojectCreateInput {
  id?: Maybe<Int>;
  name: String;
  project: ProjectCreateOneWithoutSubprojectsInput;
  tasks?: Maybe<TaskCreateManyWithoutSubprojectInput>;
}

export interface ProjectCreateInput {
  id?: Maybe<Int>;
  name: String;
  subprojects?: Maybe<SubprojectCreateManyWithoutProjectInput>;
}

export interface ProjectUpdateOneRequiredWithoutSubprojectsInput {
  create?: Maybe<ProjectCreateWithoutSubprojectsInput>;
  update?: Maybe<ProjectUpdateWithoutSubprojectsDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutSubprojectsInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface SubprojectUpdateInput {
  name?: Maybe<String>;
  project?: Maybe<ProjectUpdateOneRequiredWithoutSubprojectsInput>;
  tasks?: Maybe<TaskUpdateManyWithoutSubprojectInput>;
}

export interface ProjectCreateWithoutSubprojectsInput {
  id?: Maybe<Int>;
  name: String;
}

export interface ProjectCreateOneWithoutSubprojectsInput {
  create?: Maybe<ProjectCreateWithoutSubprojectsInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface TaskCreateWithoutSubprojectInput {
  id?: Maybe<Int>;
  name: String;
  priority?: Maybe<String>;
  comments?: Maybe<String>;
  repeat?: Maybe<Int>;
  estimateTime?: Maybe<String>;
  plannedTime?: Maybe<String>;
  plannedDate?: Maybe<String>;
  finishDate?: Maybe<String>;
  deadlineDate?: Maybe<String>;
  completed?: Maybe<Boolean>;
  timelogs?: Maybe<TimelogCreateManyWithoutTaskInput>;
}

export interface TaskUpdateInput {
  name?: Maybe<String>;
  priority?: Maybe<String>;
  comments?: Maybe<String>;
  repeat?: Maybe<Int>;
  estimateTime?: Maybe<String>;
  plannedTime?: Maybe<String>;
  plannedDate?: Maybe<String>;
  finishDate?: Maybe<String>;
  deadlineDate?: Maybe<String>;
  completed?: Maybe<Boolean>;
  subproject?: Maybe<SubprojectUpdateOneWithoutTasksInput>;
  timelogs?: Maybe<TimelogUpdateManyWithoutTaskInput>;
}

export interface TaskCreateOneWithoutTimelogsInput {
  create?: Maybe<TaskCreateWithoutTimelogsInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface TimelogPreviousValues {
  id: Int;
  startDate?: DateTimeOutput;
  finishDate?: DateTimeOutput;
}

export interface TimelogPreviousValuesPromise
  extends Promise<TimelogPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  startDate: () => Promise<DateTimeOutput>;
  finishDate: () => Promise<DateTimeOutput>;
}

export interface TimelogPreviousValuesSubscription
  extends Promise<AsyncIterator<TimelogPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  finishDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Subproject {
  id: Int;
  name: String;
}

export interface SubprojectPromise extends Promise<Subproject>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  project: <T = ProjectPromise>() => T;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SubprojectSubscription
  extends Promise<AsyncIterator<Subproject>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  project: <T = ProjectSubscription>() => T;
  tasks: <T = Promise<AsyncIterator<TaskSubscription>>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SubprojectNullablePromise
  extends Promise<Subproject | null>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  project: <T = ProjectPromise>() => T;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TaskPreviousValues {
  id: Int;
  name: String;
  priority?: String;
  comments?: String;
  repeat?: Int;
  estimateTime?: String;
  plannedTime?: String;
  plannedDate?: String;
  finishDate?: String;
  deadlineDate?: String;
  completed: Boolean;
}

export interface TaskPreviousValuesPromise
  extends Promise<TaskPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  priority: () => Promise<String>;
  comments: () => Promise<String>;
  repeat: () => Promise<Int>;
  estimateTime: () => Promise<String>;
  plannedTime: () => Promise<String>;
  plannedDate: () => Promise<String>;
  finishDate: () => Promise<String>;
  deadlineDate: () => Promise<String>;
  completed: () => Promise<Boolean>;
}

export interface TaskPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<String>>;
  comments: () => Promise<AsyncIterator<String>>;
  repeat: () => Promise<AsyncIterator<Int>>;
  estimateTime: () => Promise<AsyncIterator<String>>;
  plannedTime: () => Promise<AsyncIterator<String>>;
  plannedDate: () => Promise<AsyncIterator<String>>;
  finishDate: () => Promise<AsyncIterator<String>>;
  deadlineDate: () => Promise<AsyncIterator<String>>;
  completed: () => Promise<AsyncIterator<Boolean>>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface TimelogEdge {
  node: Timelog;
  cursor: String;
}

export interface TimelogEdgePromise extends Promise<TimelogEdge>, Fragmentable {
  node: <T = TimelogPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TimelogEdgeSubscription
  extends Promise<AsyncIterator<TimelogEdge>>,
    Fragmentable {
  node: <T = TimelogSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface TaskSubscriptionPayload {
  mutation: MutationType;
  node: Task;
  updatedFields: String[];
  previousValues: TaskPreviousValues;
}

export interface TaskSubscriptionPayloadPromise
  extends Promise<TaskSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskPreviousValuesPromise>() => T;
}

export interface TaskSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskPreviousValuesSubscription>() => T;
}

export interface AggregateTask {
  count: Int;
}

export interface AggregateTaskPromise
  extends Promise<AggregateTask>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskSubscription
  extends Promise<AsyncIterator<AggregateTask>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Timelog {
  id: Int;
  startDate?: DateTimeOutput;
  finishDate?: DateTimeOutput;
}

export interface TimelogPromise extends Promise<Timelog>, Fragmentable {
  id: () => Promise<Int>;
  startDate: () => Promise<DateTimeOutput>;
  finishDate: () => Promise<DateTimeOutput>;
  task: <T = TaskPromise>() => T;
}

export interface TimelogSubscription
  extends Promise<AsyncIterator<Timelog>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  finishDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  task: <T = TaskSubscription>() => T;
}

export interface TimelogNullablePromise
  extends Promise<Timelog | null>,
    Fragmentable {
  id: () => Promise<Int>;
  startDate: () => Promise<DateTimeOutput>;
  finishDate: () => Promise<DateTimeOutput>;
  task: <T = TaskPromise>() => T;
}

export interface TaskConnection {
  pageInfo: PageInfo;
  edges: TaskEdge[];
}

export interface TaskConnectionPromise
  extends Promise<TaskConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskEdge>>() => T;
  aggregate: <T = AggregateTaskPromise>() => T;
}

export interface TaskConnectionSubscription
  extends Promise<AsyncIterator<TaskConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskSubscription>() => T;
}

export interface Project {
  id: Int;
  name: String;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  subprojects: <T = FragmentableArray<Subproject>>(args?: {
    where?: SubprojectWhereInput;
    orderBy?: SubprojectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  subprojects: <T = Promise<AsyncIterator<SubprojectSubscription>>>(args?: {
    where?: SubprojectWhereInput;
    orderBy?: SubprojectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  subprojects: <T = FragmentableArray<Subproject>>(args?: {
    where?: SubprojectWhereInput;
    orderBy?: SubprojectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SubprojectEdge {
  node: Subproject;
  cursor: String;
}

export interface SubprojectEdgePromise
  extends Promise<SubprojectEdge>,
    Fragmentable {
  node: <T = SubprojectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SubprojectEdgeSubscription
  extends Promise<AsyncIterator<SubprojectEdge>>,
    Fragmentable {
  node: <T = SubprojectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface TimelogSubscriptionPayload {
  mutation: MutationType;
  node: Timelog;
  updatedFields: String[];
  previousValues: TimelogPreviousValues;
}

export interface TimelogSubscriptionPayloadPromise
  extends Promise<TimelogSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TimelogPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TimelogPreviousValuesPromise>() => T;
}

export interface TimelogSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TimelogSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TimelogSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TimelogPreviousValuesSubscription>() => T;
}

export interface TimelogConnection {
  pageInfo: PageInfo;
  edges: TimelogEdge[];
}

export interface TimelogConnectionPromise
  extends Promise<TimelogConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TimelogEdge>>() => T;
  aggregate: <T = AggregateTimelogPromise>() => T;
}

export interface TimelogConnectionSubscription
  extends Promise<AsyncIterator<TimelogConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TimelogEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTimelogSubscription>() => T;
}

export interface SubprojectPreviousValues {
  id: Int;
  name: String;
}

export interface SubprojectPreviousValuesPromise
  extends Promise<SubprojectPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface SubprojectPreviousValuesSubscription
  extends Promise<AsyncIterator<SubprojectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface SubprojectSubscriptionPayload {
  mutation: MutationType;
  node: Subproject;
  updatedFields: String[];
  previousValues: SubprojectPreviousValues;
}

export interface SubprojectSubscriptionPayloadPromise
  extends Promise<SubprojectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SubprojectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SubprojectPreviousValuesPromise>() => T;
}

export interface SubprojectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SubprojectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SubprojectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SubprojectPreviousValuesSubscription>() => T;
}

export interface Task {
  id: Int;
  name: String;
  priority?: String;
  comments?: String;
  repeat?: Int;
  estimateTime?: String;
  plannedTime?: String;
  plannedDate?: String;
  finishDate?: String;
  deadlineDate?: String;
  completed: Boolean;
}

export interface TaskPromise extends Promise<Task>, Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  priority: () => Promise<String>;
  comments: () => Promise<String>;
  repeat: () => Promise<Int>;
  estimateTime: () => Promise<String>;
  plannedTime: () => Promise<String>;
  plannedDate: () => Promise<String>;
  finishDate: () => Promise<String>;
  deadlineDate: () => Promise<String>;
  completed: () => Promise<Boolean>;
  subproject: <T = SubprojectPromise>() => T;
  timelogs: <T = FragmentableArray<Timelog>>(args?: {
    where?: TimelogWhereInput;
    orderBy?: TimelogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaskSubscription
  extends Promise<AsyncIterator<Task>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
  priority: () => Promise<AsyncIterator<String>>;
  comments: () => Promise<AsyncIterator<String>>;
  repeat: () => Promise<AsyncIterator<Int>>;
  estimateTime: () => Promise<AsyncIterator<String>>;
  plannedTime: () => Promise<AsyncIterator<String>>;
  plannedDate: () => Promise<AsyncIterator<String>>;
  finishDate: () => Promise<AsyncIterator<String>>;
  deadlineDate: () => Promise<AsyncIterator<String>>;
  completed: () => Promise<AsyncIterator<Boolean>>;
  subproject: <T = SubprojectSubscription>() => T;
  timelogs: <T = Promise<AsyncIterator<TimelogSubscription>>>(args?: {
    where?: TimelogWhereInput;
    orderBy?: TimelogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaskNullablePromise
  extends Promise<Task | null>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
  priority: () => Promise<String>;
  comments: () => Promise<String>;
  repeat: () => Promise<Int>;
  estimateTime: () => Promise<String>;
  plannedTime: () => Promise<String>;
  plannedDate: () => Promise<String>;
  finishDate: () => Promise<String>;
  deadlineDate: () => Promise<String>;
  completed: () => Promise<Boolean>;
  subproject: <T = SubprojectPromise>() => T;
  timelogs: <T = FragmentableArray<Timelog>>(args?: {
    where?: TimelogWhereInput;
    orderBy?: TimelogOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProjectPreviousValues {
  id: Int;
  name: String;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  name: () => Promise<String>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface TaskEdge {
  node: Task;
  cursor: String;
}

export interface TaskEdgePromise extends Promise<TaskEdge>, Fragmentable {
  node: <T = TaskPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskEdgeSubscription
  extends Promise<AsyncIterator<TaskEdge>>,
    Fragmentable {
  node: <T = TaskSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTimelog {
  count: Int;
}

export interface AggregateTimelogPromise
  extends Promise<AggregateTimelog>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTimelogSubscription
  extends Promise<AsyncIterator<AggregateTimelog>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SubprojectConnection {
  pageInfo: PageInfo;
  edges: SubprojectEdge[];
}

export interface SubprojectConnectionPromise
  extends Promise<SubprojectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SubprojectEdge>>() => T;
  aggregate: <T = AggregateSubprojectPromise>() => T;
}

export interface SubprojectConnectionSubscription
  extends Promise<AsyncIterator<SubprojectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SubprojectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSubprojectSubscription>() => T;
}

export interface AggregateSubproject {
  count: Int;
}

export interface AggregateSubprojectPromise
  extends Promise<AggregateSubproject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSubprojectSubscription
  extends Promise<AsyncIterator<AggregateSubproject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Project",
    embedded: false
  },
  {
    name: "Subproject",
    embedded: false
  },
  {
    name: "Task",
    embedded: false
  },
  {
    name: "Timelog",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://tasks-api-prisma-9d8a96e4f1.herokuapp.com/tasks-api-prisma/dev`
});
export const prisma = new Prisma();
